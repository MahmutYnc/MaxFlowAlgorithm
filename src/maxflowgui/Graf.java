/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maxflowgui;

import com.mxgraph.layout.mxCircleLayout;
import com.mxgraph.layout.mxIGraphLayout;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.swing.util.mxSwingConstants;

import java.awt.Color;
import java.util.Arrays;
import javax.swing.JButton;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import org.jgrapht.ext.JGraphXAdapter;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.SimpleDirectedWeightedGraph;

/**
 * 
 * 
 *
 * @author siebe
 */
public class Graf extends javax.swing.JFrame {

    /**
     * Creates new form Graf
     */
    private int nodeCount;
    private String[] nodeNames;
    private String source, sink;
    private static int[][] matrix;
    public String information;
    
    public int maxResult = 0;
    public String minResult = "";

        //My attributes
        boolean[] isVisited;
        final static int startX = 40, startY = 250, addX = 100, addY = 100, srcY = 300;
        final static int WIDTH = 40, HEIGHT = 30;

    JPanel pane;
    JButton maxFlowBtn, mincutBtn;
    JTextField maxFlowRes;
    JTextArea minCutEdges;
    JTextArea maxPath;
    MaxFlow m = new MaxFlow(); 
    
    public Graf(int nodeCount, String[] nodeNames,int[][] matrix, String information) {
        this.nodeCount = nodeCount;
        this.nodeNames = nodeNames;
        this.information = information;
        this.matrix = matrix;
        
        setTitle("Max Flow Algorithm");
        initComponents();
        setVisible(true);
 
        
        createNodes2(matrix, nodeNames);
        this.add(pane);
        
    }
    private JButton buttons[];
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 904, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    static int[][] graph = matrix;
    
    public static class MyEdge extends DefaultWeightedEdge {
        @Override
        public String toString() {
            return String.valueOf(getWeight());           
        }
     
    }
    public void createNodes2 (int[][] g, String[] vNames){
        
            //Create graph model
            SimpleDirectedWeightedGraph<String, MyEdge>  graph = 
            new SimpleDirectedWeightedGraph<>
            (MyEdge.class); 
            
            //count edges of the graph
            int edgeCount = 0;
            for (int i = 0; i < g.length; i++) {
                for (int j = 0; j < g[i].length; j++) {
                    if(g[i][j] != 0){
                        edgeCount++;
                    }
                }
            }
            //Create edge array 
            MyEdge[] edge = new MyEdge[edgeCount];
            
            for (int i = 0; i < g.length; i++) {
                String str = "Musluk" + (char)(65 + i);
                graph.addVertex(str);
            }
    
            
             
             int k = 0;
             for (int i = 0; i < g.length; i++) {
                for (int j = 0; j < g[i].length; j++) {
                    if(g[i][j] != 0){
                        
                        String from = "Musluk" + (char)(65 + i);
                        String to = "Musluk" + (char)(65 + j);
                        
                        edge[k] = graph.addEdge(from, to);
                        graph.setEdgeWeight(edge[k], g[i][j] );
                        k++;
                    }
                }
            }
            

        System.out.println("Shortest path from vertex1 to vertex5:");
           

        
        mxSwingConstants.EDGE_SELECTION_COLOR = Color.GREEN;
        mxSwingConstants.VERTEX_SELECTION_COLOR = Color.BLUE;
        

        JGraphXAdapter<String, MyEdge> graphAdapter = 
                new JGraphXAdapter<>(graph);

        mxIGraphLayout layout = new mxCircleLayout(graphAdapter);
        
        layout.execute(graphAdapter.getDefaultParent());
                
        
        System.out.println(graphAdapter.isEdgeLabelsMovable());
                        
        
        pane = new JPanel();
        pane.setLayout(null);
        pane.setBackground(new java.awt.Color(230, 230, 250));
        pane.setSize(new java.awt.Dimension(904, 640));
        
        
        mxGraphComponent mxi = new mxGraphComponent(graphAdapter);
        mxi.setPreferredSize(new java.awt.Dimension(600, 300));
        mxi.setBounds(100, 100, 804, 300);
        mxi.setLocation(40, 100);
        pane.add(mxi);
        
        
        //MaxFlow Button and algorithm
        maxFlowBtn = new JButton("Max-Flow");
        maxFlowBtn.setBounds(100, 500, WIDTH+40, HEIGHT);
        //set on action func here
        maxFlowBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                maxFlowBtnMouseClicked(evt);
            }
        });
        pane.add(maxFlowBtn);
        
        //Result of the maxFlow algorithm to display
        maxFlowRes = new JTextField();
        maxFlowRes.setBounds(200, 500, WIDTH+40, HEIGHT);
        maxFlowRes.setBackground(new java.awt.Color(230, 230, 250));
        maxFlowRes.setEditable(false);
        pane.add(maxFlowRes);
        
        //path of the maxFlow algorithm to display
        maxPath = new JTextArea();
        //maxPath.setBounds(300, 500, WIDTH*7 + 4, HEIGHT*4);
        maxPath.setBackground(new java.awt.Color(230, 230, 250));
        maxPath.setEditable(false);
        JScrollPane scroll = new JScrollPane(maxPath);
        scroll.setBounds(300, 500, WIDTH*7 + 4, HEIGHT*4);    
        pane.add(scroll);
        
        
        //Min-Cut Button and algorithm
        mincutBtn = new JButton("Min-Cut");
        mincutBtn.setBounds(604, 500, WIDTH+40, HEIGHT);
        //set on action func here
        mincutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mincutBtnMouseClicked(evt);
            }
        });
        pane.add(mincutBtn);
        
        //Result of the maxFlow algorithm to display
        minCutEdges = new JTextArea();
        minCutEdges.setBounds(704, 500, WIDTH*4, HEIGHT*3);
        minCutEdges.setBackground(new java.awt.Color(230, 230, 250));
        minCutEdges.setEditable(false);
        pane.add(minCutEdges);
        
    }
    
    private void maxFlowBtnMouseClicked(java.awt.event.MouseEvent evt) {

        System.out.println(Arrays.deepToString(matrix).replace("], ", "]\n").replace("[[", "[").replace("]]", "]"));
        
        maxResult = m.fordFulkerson(matrix, 0, matrix.length-1, nodeCount);
	System.out.println("The maximum possible flow is " + maxResult); 
        maxFlowRes.setText("-->"+maxResult);
        maxPath.setText(m.getString());
    }
    private void mincutBtnMouseClicked(java.awt.event.MouseEvent evt) {                                      
        
   	System.out.println(Arrays.deepToString(matrix).replace("], ", "]\n").replace("[[", "[").replace("]]", "]"));
       
        MinCut miny = new MinCut();
	minResult = miny.minCut(matrix, 0, matrix.length-1); 
        System.out.println("Edges between these Vertexes should be cut for Min - Cut algorithm: \n" + minResult); 
        minCutEdges.setText(minResult);
    }  
    /*
    //My own graph-builder
    public void createNodes (int[][] graph, String[] str) {
        //remove later
        buttons = new JButton[graph.length];
        isVisited = new boolean[graph.length];
        
        int currentX = 40, currentY = 250;
        
        System.out.println("graph length : "+ graph.length);
        
        //source Node 
        JButton btn = new JButton( 0 + ".");
        btn.setEnabled(false);
        btn.setBounds(startX, srcY, WIDTH, HEIGHT);
        buttons[0] = btn;
        jPanel1.add(btn);
        isVisited[0] = true;
        
        //nodes between source and sink       
        for (int i = 0; i < graph.length; i++) {            
            for (int j = 0; j < graph[i].length -1; j++) {
                
                if(!isVisited[j] && graph[i][j] != 0 && (j%2 != 0)){
                    btn = new JButton( j + ".");
                    btn.setEnabled(false);
                    btn.setBounds(currentX + addX, currentY, WIDTH, HEIGHT);
                    buttons[i] = btn;
                    jPanel1.add(btn);
                    isVisited[j] = true;
                    currentY += addY;
                    
                    //problemmy part is here 
                    btn = new JButton( j+1 + ".");
                    btn.setEnabled(false);
                    btn.setBounds(currentX + addX, currentY, WIDTH, HEIGHT);
                    buttons[i+1] = btn;
                    jPanel1.add(btn);
                    isVisited[j+1] = true;
                    currentY += addY;
                }                
                
            }
            currentY = startY;
            currentX += addX;
            
        }
        //SiNK NODE
        btn = new JButton( graph.length-1 + ".");
        btn.setEnabled(false);
        btn.setBounds((graph.length / 2 ) * 100 + 40 , srcY, WIDTH, HEIGHT);
        buttons[graph.length - 1] = btn;
        jPanel1.add(btn);
        isVisited[graph.length-1] = true;
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
