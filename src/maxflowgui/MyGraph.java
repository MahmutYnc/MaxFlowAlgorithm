/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package maxflowgui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.event.MouseInputAdapter;

/**
 *
 * @author siebe
 */
public class MyGraph extends javax.swing.JFrame {

    /**
     * Creates new form MyGraph
     */
    Point location;
    MouseEvent pressed;
    //My attributes
    static boolean[] isVisited;
    final static int startX = 40, startY = 250, addX = 100, addY = 100, srcY = 300;
    final static int WIDTH = 40, HEIGHT = 30;
    
    JButton[] buttons;
    
    
    static int graph[][] =new int[][] { {0, 16, 13, 0, 0, 0}, 
                                     {0, 0, 10, 12, 0, 0}, 
                                     {0, 4, 0, 0, 14, 0}, 
                                     {0, 0, 9, 0, 0, 20}, 
                                     {0, 0, 0, 7, 0, 4}, 
                                     {0, 0, 0, 0, 0, 0} 
                                   }; 
    static String[] arr = {"","",""};
    public MyGraph() {
        initComponents();
        
        createNodes(graph, arr);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(230, 230, 250));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 780, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 596, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyGraph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 // Let us create a graph shown in the above example 
                
                new MyGraph().setVisible(true);
            }
        });
    }
    
    //My own graph-builder
    public void createNodes (int[][] graph, String[] str) {
        //remove later
        buttons = new JButton[graph.length];
        isVisited = new boolean[graph.length];
        
        int currentX = 40, currentY = 250;
        
        System.out.println("graph length : "+ graph.length);
        
        //source Node 
        JButton btn = new JButton( 0 + ".");
        //btn.setEnabled(false);
        btn.setBounds(startX, srcY, WIDTH, HEIGHT);
        buttons[0] = btn;
        jPanel1.add(btn);
        isVisited[0] = true;
        
        //nodes between source and sink       
        for (int i = 0; i < graph.length; i++) {            
            for (int j = 0; j < graph[i].length -1; j++) {
                
                if(!isVisited[j] && graph[i][j] != 0){
                    btn = new JButton( j + ".");
                    //btn.setEnabled(false);
                    btn.setBounds(currentX + addX, currentY, WIDTH, HEIGHT);
                    buttons[i] = btn;
                    jPanel1.add(btn);
                    isVisited[j] = true;
                    currentY += addY;
                }                
                
            }
            currentY = startY;
            currentX += addX;
            
        }
        //SiNK NODE
        btn = new JButton( graph.length-1 + ".");
        //btn.setEnabled(false);
        btn.setBounds(currentX , srcY, WIDTH, HEIGHT);
        buttons[graph.length - 1] = btn;
        jPanel1.add(btn);
        isVisited[graph.length-1] = true;
        
        JLabel jbl = new JLabel("asdasdadsad");
        jbl.setBounds(100, 100, WIDTH, HEIGHT);
        // create a line border with the specified color and width
        Border border = BorderFactory.createLineBorder(Color.BLUE, 5);
 
        // set the border of this component
        jbl.setBorder(border);
        jPanel1.add(jbl);
        
        MouseInputAdapter d = new MouseInputAdapter() {
             public void mousePressed(MouseEvent me)
            {
                pressed = me;
            }
            

            public void mouseDragged(MouseEvent me)
            {
                Component component = me.getComponent();
                location = component.getLocation(location);
                int x = location.x - pressed.getX() + me.getX();
                int y = location.y - pressed.getY() + me.getY();
                System.out.println("x and y  : "+ location.x + " - " +location.y);

                component.setLocation(x, y);
             }
        };
        
        jbl.addMouseListener(d);
        jbl.addMouseMotionListener(d);
        buttons[0].addMouseListener(d);
        buttons[0].addMouseMotionListener(d);
        for (int i = 0; i < graph.length; i++) {                       
            
        }
        
        
        
               
    }
  public class ConnectTheDots extends JPanel {

        private Point startPoint;
        private Point endPoint;

        public ConnectTheDots() {
            setOpaque(false);
        }

        public void drawLine(Point startPoint, Point endPoint) {
            this.startPoint = startPoint;
            this.endPoint = endPoint;
            repaint();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (startPoint != null && endPoint != null) {
                Graphics2D g2d = (Graphics2D) g.create();
                Line2D line = new Line2D.Double(startPoint, endPoint);
                g2d.setColor(Color.BLACK);
                g2d.draw(line);
                g2d.dispose();
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
class DragListener extends MouseInputAdapter
{
    Point location;
    MouseEvent pressed;
 
    public void mousePressed(MouseEvent me)
    {
        pressed = me;
    }
 
    public void mouseDragged(MouseEvent me)
    {
        Component component = me.getComponent();
        location = component.getLocation(location);
        int x = location.x - pressed.getX() + me.getX();
        int y = location.y - pressed.getY() + me.getY();
        System.out.println("x and y  : "+ location.x + " - " +location.y);

        component.setLocation(x, y);
     }
}